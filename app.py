import traceback

from flask import Flask
from flask_cors import CORS
from flask_migrate import Migrate

from admin_routes import admin_routes
from models import db, User
from routes import routes
from flask_jwt_extended import JWTManager
# –ü–æ–¥–∫–ª—é—á–∞–µ–º Blueprint —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
from auth import auth
from flask import request, jsonify
from flask_jwt_extended import verify_jwt_in_request, get_jwt_identity
from functools import wraps


app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}}, supports_credentials=True)

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://quramdb2:9P3RoNtzfA08JVXClmUgTXE1fH3D7Ys8@dpg-cuua60qj1k6c73dojbt0-a.oregon-postgres.render.com/quramdb2'
app.debug = True

app.config['JWT_SECRET_KEY'] = 'your_secret_key'  # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ JWT
jwt = JWTManager(app)

app.register_blueprint(auth, url_prefix='/auth')
app.register_blueprint(admin_routes)

from notification_routes import notification_routes
app.register_blueprint(notification_routes, url_prefix='/notifications')

db.init_app(app)
migrate = Migrate(app, db)

app.register_blueprint(routes)

@app.before_request
def check_auth():
    open_routes = ['/auth/login', '/auth/register']  
    if request.path.startswith(tuple(open_routes)):  
        return  

    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {request.path}")
        verify_jwt_in_request()
        print("‚úÖ JWT-—Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ JWT-—Ç–æ–∫–µ–Ω–∞")
        traceback.print_exc()
        return jsonify({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"}), 401

def admin_required(fn):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    @wraps(fn)
    def wrapper(*args, **kwargs):
        current_user_id = get_jwt_identity()  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT
        user = User.query.get(current_user_id)  # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ

        if not user or user.authority != "admin":
            return jsonify({"status": "error", "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}), 403

        return fn(*args, **kwargs)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ –∞–¥–º–∏–Ω
    return wrapper



if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    print(app.url_map)

    app.run(debug=True)




