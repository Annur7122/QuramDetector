from operator import or_
import ast
from flask import Blueprint, request, jsonify
from sqlalchemy.orm import joinedload
from werkzeug.utils import secure_filename
import os
from check import check_halal_status
from image_processor import extract_text_from_image
from models import db, Product, Description, Review, User, Favourite
from flask_jwt_extended import jwt_required,get_jwt_identity
import base64
#import openai



routes = Blueprint('routes', __name__)

UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}

if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

openai.api_key = os.getenv("OPENAI_API_KEY")

UPLOAD_FOLDER = "uploads"
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}

# Ensure upload folder exists
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

def allowed_file(filename):
    """Check if uploaded file has an allowed extension."""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@routes.route("/process-images", methods=["POST"])
def process_images():
    """Extract text from an image using GPT-4o OCR and check if ingredients are Halal/Haram."""
    
    # Step 1: Validate File
    if "file" not in request.files:
        return jsonify({"status": "error", "message": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", "code": 400}), 400
    
    file = request.files["file"]

    if file.filename == "":
        return jsonify({"status": "error", "message": "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", "code": 400}), 400

    if not allowed_file(file.filename):
        return jsonify({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞", "code": 400}), 400

    # Step 2: Save File Securely
    filename = secure_filename(file.filename)
    filepath = os.path.join(UPLOAD_FOLDER, filename)
    file.save(filepath)

    try:
        # Step 3: Convert Image to Base64 for OpenAI
        file.seek(0)  # Reset file pointer to beginning
        img_b64_str = base64.b64encode(file.read()).decode("utf-8")
        img_type = file.content_type  # Get content type (e.g., "image/png")

        # Step 4: Send Image to GPT-4o for OCR
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": (
                                "–¢—ã OCR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äì –∏–∑–≤–ª–µ–∫–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. "
                                "–ù–µ–≤–∞–∂–Ω–æ, –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ —Å–æ—Å—Ç–∞–≤ —É–∫–∞–∑–∞–Ω. –¢–≤–æ—è —Ü–µ–ª—å:  \n\n"
                                "1. –ò–∑–≤–ª–µ—á—å –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –¥–æ–±–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–≤–æ–¥–∞\", \"—Å–æ–∫ –º–∞–Ω–≥–æ\", \"–∫–∏—Å–ª–æ—Ç–∞\", \"—Å—É–∫—Ä–∞–ª–æ–∑–∞\", \"E102\", \"E110\").  \n"
                                "2. –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∏–¥–∞ \"E100\", \"E121\" –∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –¥–æ–±–∞–≤–∫–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º E, –≤—ã–¥–µ–ª—è–π –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ –∫–∞–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.  \n"
                                "3. –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–µ Python-—Å–ø–∏—Å–∫–∞ (list), –Ω–∞–ø—Ä–∏–º–µ—Ä:    \n"
                                "   [\"–≤–æ–¥–∞\", \"—Å–æ–∫ –º–∞–Ω–≥–æ\", \"–∫–∏—Å–ª–æ—Ç–∞\", \"—Å—É–∫—Ä–∞–ª–æ–∑–∞\", \"–ø–∏—â–µ–≤—ã–µ –∫—Ä–∞—Å–∏—Ç–µ–ª–∏\", \"E102\", \"E110\"]  \n"
                                "4. –ù–∏–∫–∞–∫–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º—ã –æ—Ç–≤–µ—Ç–∞, —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫. –ë–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤."
                            )
                        },
                        {
                            "type": "image_url",
                            "image_url": {"url": f"data:{img_type};base64,{img_b64_str}"}
                        }
                    ]
                }
            ],
            temperature=0
        )

        # Step 5: Parse Response
        extracted_text = response.choices[0].message.content.strip()
        ingredients_list = ast.literal_eval(extracted_text)  # Convert extracted text into Python list
        
        # Step 6: Check Halal Status (Fixing the Issue)
        halal_status_result = check_halal_status(ingredients_list)

        # Step 7: Return Processed Response
        return jsonify({
            "status": "success",
            "message": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
            "data": {
                "file_path": filepath,
                "extracted_text": ingredients_list,
                "status": halal_status_result["status"],  # üî• FIX: This now correctly shows "–•–∞—Ä–∞–º", "–•–∞–ª–∞–ª", or "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ"
                "found_ingredients": halal_status_result["found_ingredients"]  # üî• FIX: Correctly lists the found harmful ingredients
            }
        }), 200

    except openai.OpenAIError as api_error:
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ API OpenAI: {str(api_error)}"}), 500

    except Exception as e:
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"}), 500


@routes.route('/test', methods=['GET'])
@jwt_required()
def test():
    return jsonify({"status": "success", "data": {"test": "test1"}}), 200

@routes.route('/product/<int:product_id>', methods=['GET'])
def get_product(product_id):
    product = Product.query.get(product_id)
    if not product:
        return jsonify({
            "status": "error",
            "message": f"–ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "code": 404
        }), 404

    product.count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    db.session.commit()

    reviews = Review.query.filter_by(product_id=product.id).all()

    review_list = [{
        "id": r.id,
        "user_id": r.user_id,
        "review_description": r.review_description,
        "stars": r.stars
    } for r in reviews]

    return jsonify({
        "status": "success",
        "data": {
            "id": product.id,
            "name": product.name,
            "image": product.image,
            "ingredients": product.ingredients,
            "reviews": review_list
        }
    }), 200


@routes.route('/products', methods=['GET'])
def get_all_products():
    products = Product.query.all()

    product_list = [{
        "id": product.id,
        "name": product.name,
        "image": product.image,
        "ingredients": product.ingredients
    } for product in products]



    return jsonify({
        "status": "success",
        "data": {
            "products": product_list
        }
    }), 200

@routes.route('/top-products', methods=['GET'])
def get_top_products():
    top_products = Product.query.order_by(Product.count.desc()).limit(3).all()

    product_list = [{
        "id": p.id,
        "name": p.name,
        "image": p.image,
        "ingredients": p.ingredients,
        "count": p.count
    } for p in top_products]

    return jsonify({
        "status": "success",
        "data": {
            "products": product_list
        }
    }), 200



@routes.route('/search', methods=['GET'])
def search_products():
    query = request.args.get('q', '').strip()

    if not query:
        return jsonify({"status": "error", "message": "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"}), 400




    try:
        products = db.session.query(Product).join(Description).filter(
            or_(
                Product.name.ilike(f"%{query}%"),
                Description.name.ilike(f"%{query}%")
            )
        ).options(joinedload(Product.description)).all()

        if not products:
            return jsonify({"status": "error", "message": "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

        product_list = [{
            "id": p.id,
            "name": p.name,
            "image": p.image,
            "ingredients": p.ingredients,
            "description": p.description.name if p.description else None
        } for p in products]

        return jsonify({"status": "success", "data": {"products": product_list}}), 200

    except Exception as e:
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"}), 500


@routes.route('/reviews', methods=['POST'])
@jwt_required()
def add_review():
    current_user_id = get_jwt_identity()  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User.query.get(current_user_id)

    if not user:
        return jsonify({"status": "error", "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 401

    data = request.get_json()
    product_id = data.get("product_id")
    review_description = data.get("review_description", "")
    stars = data.get("stars")

    if not all([product_id, stars]):
        return jsonify({"status": "error", "message": "product_id –∏ stars –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}), 400

    product = Product.query.get(product_id)
    if not product:
        return jsonify({"status": "error", "message": "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    new_review = Review(
        user_id=user.id,  # –ë–µ—Ä–µ–º user_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
        product_id=product_id,
        review_description=review_description,
        stars=stars
    )
    db.session.add(new_review)
    db.session.commit()

    return jsonify({
        "status": "success",
        "message": "–û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω",
        "data": {
            "user_id": user.id,
            "user_name": user.name,
            "review_description": review_description,
            "stars": stars
        }
    }), 201

@routes.route('/favourites/toggle', methods=['POST'])
@jwt_required()
def toggle_favourite():
    """–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    user_id = get_jwt_identity()  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = request.get_json()
    product_id = data.get("product_id")

    if not product_id:
        return jsonify({"status": "error", "message": "product_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}), 400

    product = Product.query.get(product_id)
    if not product:
        return jsonify({"status": "error", "message": "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ–¥—É–∫—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    favourite = Favourite.query.filter_by(user_id=user_id, product_id=product_id).first()

    if favourite:
        # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        db.session.delete(favourite)
        db.session.commit()
        return jsonify({"status": "success", "message": "–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"}), 200
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        new_fav = Favourite(user_id=user_id, product_id=product_id)
        db.session.add(new_fav)
        db.session.commit()
        return jsonify({"status": "success", "message": "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"}), 201

@routes.route('/favourites', methods=['GET'])
@jwt_required()
def get_favourites():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = get_jwt_identity()

    favourites = (
        db.session.query(Product)
        .join(Favourite, Product.id == Favourite.product_id)
        .filter(Favourite.user_id == user_id)
        .all()
    )

    products_list = [
        {"id": p.id, "name": p.name, "image": p.image, "ingredients": p.ingredients}
        for p in favourites
    ]

    return jsonify({"status": "success", "data": {"favourites": products_list}}), 200
